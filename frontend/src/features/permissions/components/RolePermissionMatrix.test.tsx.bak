import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { MantineProvider } from '@mantine/core';
import { RolePermissionMatrix } from './RolePermissionMatrix';
import * as permissionHooks from '../hooks/usePermissions';
import type { Role, Permission } from '../../../types';
import { vi } from 'vitest';

// Mock the hooks
vi.mock('../hooks/usePermissions');
const mockHooks = permissionHooks as any;

// Mock notifications
vi.mock('@mantine/notifications', () => ({
  notifications: {
    show: vi.fn(),
  },
}));

const mockRoles: Role[] = [
  {
    id: 1,
    name: 'Admin',
    permissions: [
      { id: 1, name: 'user:read', description: 'Read users' },
      { id: 2, name: 'user:write', description: 'Write users' },
    ],
  },
  {
    id: 2,
    name: 'User',
    permissions: [
      { id: 1, name: 'user:read', description: 'Read users' },
    ],
  },
];

const mockPermissions: Permission[] = [
  { id: 1, name: 'user:read', description: 'Read users' },
  { id: 2, name: 'user:write', description: 'Write users' },
  { id: 3, name: 'role:read', description: 'Read roles' },
  { id: 4, name: 'role:write', description: 'Write roles' },
];

const mockMatrix = {
  1: [1, 2], // Admin has user:read and user:write
  2: [1],    // User has only user:read
};

const createWrapper = () => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
      mutations: { retry: false },
    },
  });

  return ({ children }: { children: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>
      <MantineProvider>
        {children}
      </MantineProvider>
    </QueryClientProvider>
  );
};

describe('RolePermissionMatrix', () => {
  beforeEach(() => {
    vi.clearAllMocks();

    // Mock successful data fetching
    mockHooks.useAllRoles.mockReturnValue({
      data: mockRoles,
      isLoading: false,
      isError: false,
      error: null,
    } as any);

    mockHooks.useAllPermissions.mockReturnValue({
      data: mockPermissions,
      isLoading: false,
      isError: false,
      error: null,
    } as any);

    mockHooks.useRolePermissionMatrix.mockReturnValue({
      data: mockMatrix,
      isLoading: false,
      isError: false,
      error: null,
    } as any);

    // Mock mutations
    mockHooks.useUpdateRolePermissions.mockReturnValue({
      mutateAsync: vi.fn().mockResolvedValue(undefined),
      isPending: false,
    } as any);

    mockHooks.useCreateRole.mockReturnValue({
      mutateAsync: vi.fn().mockResolvedValue(undefined),
      isPending: false,
    } as any);

    mockHooks.useUpdateRole.mockReturnValue({
      mutateAsync: vi.fn().mockResolvedValue(undefined),
      isPending: false,
    } as any);

    mockHooks.useDeleteRole.mockReturnValue({
      mutateAsync: vi.fn().mockResolvedValue(undefined),
      isPending: false,
    } as any);

    mockHooks.usePermissionImpactAnalysis.mockReturnValue({
      mutate: vi.fn(),
      data: null,
      isLoading: false,
    } as any);
  });

  it('should render role-permission matrix', () => {
    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    expect(screen.getByText('Role-Permission Matrix')).toBeInTheDocument();
    expect(screen.getByText('Create Role')).toBeInTheDocument();

    // Check if roles are displayed in table headers
    expect(screen.getByText('Admin')).toBeInTheDocument();
    expect(screen.getByText('User')).toBeInTheDocument();

    // Check if permissions are displayed
    expect(screen.getByText('read')).toBeInTheDocument(); // user:read -> read
    expect(screen.getByText('write')).toBeInTheDocument(); // user:write -> write
  });

  it('should display loading state', () => {
    mockHooks.useAllRoles.mockReturnValue({
      data: undefined,
      isLoading: true,
      isError: false,
      error: null,
    } as any);

    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    // Loading overlay should be visible
    expect(document.querySelector('.mantine-LoadingOverlay-root')).toBeInTheDocument();
  });

  it('should display empty state when no roles exist', () => {
    mockHooks.useAllRoles.mockReturnValue({
      data: [],
      isLoading: false,
      isError: false,
      error: null,
    } as any);

    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    expect(screen.getByText('No roles found')).toBeInTheDocument();
    expect(screen.getByText('Create your first role to start managing permissions.')).toBeInTheDocument();
  });

  it('should handle permission toggle', async () => {
    const mockUpdateRolePermissions = vi.fn().mockResolvedValue(undefined);
    mockHooks.useUpdateRolePermissions.mockReturnValue({
      mutateAsync: mockUpdateRolePermissions,
      isPending: false,
    } as any);

    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    // Find a checkbox for a permission that the User role doesn't have (role:read)
    const checkboxes = screen.getAllByRole('checkbox');
    const roleReadCheckbox = checkboxes.find(checkbox => 
      !checkbox.checked && 
      checkbox.closest('tr')?.textContent?.includes('read')
    );

    if (roleReadCheckbox) {
      fireEvent.click(roleReadCheckbox);

      await waitFor(() => {
        expect(mockUpdateRolePermissions).toHaveBeenCalled();
      });
    }
  });

  it('should open create role modal', async () => {
    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    const createButton = screen.getByText('Create Role');
    fireEvent.click(createButton);

    await waitFor(() => {
      expect(screen.getByText('Create Role')).toBeInTheDocument();
    });
  });

  it('should handle role edit', async () => {
    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    // Find edit button (IconEdit)
    const editButtons = screen.getAllByRole('button');
    const editButton = editButtons.find(button => 
      button.querySelector('svg') && 
      button.getAttribute('aria-label') === null
    );

    if (editButton) {
      fireEvent.click(editButton);

      await waitFor(() => {
        expect(screen.getByText('Edit Role')).toBeInTheDocument();
      });
    }
  });

  it('should handle role deletion with confirmation', async () => {
    const mockDeleteRole = vi.fn().mockResolvedValue(undefined);
    mockHooks.useDeleteRole.mockReturnValue({
      mutateAsync: mockDeleteRole,
      isPending: false,
    } as any);

    // Mock window.confirm
    const originalConfirm = window.confirm;
    window.confirm = vi.fn().mockReturnValue(true);

    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    // Find delete button (IconTrash)
    const deleteButtons = screen.getAllByRole('button');
    const deleteButton = deleteButtons.find(button => 
      button.querySelector('svg') && 
      button.style.color === 'red'
    );

    if (deleteButton) {
      fireEvent.click(deleteButton);

      await waitFor(() => {
        expect(window.confirm).toHaveBeenCalledWith(
          'Are you sure you want to delete this role? This action cannot be undone.'
        );
        expect(mockDeleteRole).toHaveBeenCalled();
      });
    }

    // Restore original confirm
    window.confirm = originalConfirm;
  });

  it('should group permissions by category', () => {
    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    // Check if permission categories are displayed
    expect(screen.getByText('user')).toBeInTheDocument();
    expect(screen.getByText('role')).toBeInTheDocument();
  });

  it('should show correct permission states in matrix', () => {
    render(<RolePermissionMatrix />, { wrapper: createWrapper() });

    const checkboxes = screen.getAllByRole('checkbox');
    
    // Admin should have user:read and user:write checked
    // User should have only user:read checked
    // This is a simplified test - in reality, we'd need to identify specific checkboxes
    expect(checkboxes.length).toBeGreaterThan(0);
  });

  it('should call onRoleSelect when provided', () => {
    const mockOnRoleSelect = vi.fn();
    render(<RolePermissionMatrix onRoleSelect={mockOnRoleSelect} />, { 
      wrapper: createWrapper() 
    });

    // This would be triggered by some interaction that selects a role
    // The exact implementation depends on how role selection is handled
    expect(mockOnRoleSelect).not.toHaveBeenCalled();
  });
});